<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:ice="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:controls="clr-namespace:Fei.SliceAndView.Controls;assembly=Fei.SliceAndView.Controls"
                    xmlns:types="clr-namespace:Fei.Common.Types;assembly=Fei.Common.Types"
                    xmlns:converters="clr-namespace:Fei.SliceAndView.Common.Converters;assembly=Fei.SliceAndView.Common"
                    xmlns:validation="clr-namespace:Fei.SliceAndView.Common.Validation;assembly=Fei.SliceAndView.Common"
                    xmlns:is="http://schemas.microsoft.com/expression/2010/interactions"
                    mc:Ignorable="d" >

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <converters:BoolToObjectConverter x:Key="BoolToNegationConverter" TrueValue="False" FalseValue="True"/>
    <converters:ScanResolutionToStringConverter x:Key="ScanResolutionToStringConverter"/>
    <converters:PhysicalValueConverter x:Key="HighVoltageValueConverter" Precision="10" DefaultUnit="{x:Static types:Unit.Volt}"/>
    <converters:PhysicalValueConverter x:Key="BeamCurrentValueConverter" NumberOfDigits="2" DefaultUnit="{x:Static types:Unit.Ampere}"/>
    <converters:EnumToStringConverter x:Key="EnumToStringConverter" />

    <!-- Constants -->
    <system:Double x:Key="FontSize">13</system:Double>

    <!--Geometry-->
    <Geometry x:Key="Checkmark">M1.0E-41,4.2 L0,2.1 2.5,4.5 6.7,4.4E-47 6.7,2.3 2.5,6.7 z</Geometry>
    <Geometry x:Key="CheckBoxCheckmark">M7.2,5 L5.5,7.16 4.16,6.3 3.5,6.7 5.5,8.4 8.6,5.25 C8.6,5.25 8,4.7 7.22,5</Geometry>
    <!--<Geometry x:Key="CheckBoxCheckmark">F1 M 10.072,10.072 L 0.000,10.072 L 0.000,0.000 L 10.072,0.000 L 10.072,10.072 Z</Geometry>-->
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>
    <Geometry x:Key="DownArrow">F1 M 38.138,0.839 C 37.019,-0.280 35.204,-0.280 34.085,0.839 L 19.442,15.482 L 4.827,0.867 C 3.723,-0.237 1.932,-0.237 0.828,0.867 L 0.828,0.867 C -0.276,1.971 -0.276,3.761 0.828,4.865 L 17.455,21.492 C 18.710,22.747 20.297,22.733 21.565,21.465 L 38.138,4.893 C 39.257,3.773 39.257,1.959 38.138,0.839 Z</Geometry>
    <Geometry x:Key="UpArrow">F1 M 0.839,21.585 C 1.959,22.705 3.773,22.705 4.893,21.585 L 19.535,6.943 L 34.151,21.558 C 35.255,22.662 37.045,22.662 38.149,21.558 L 38.149,21.558 C 39.253,20.454 39.253,18.664 38.149,17.560 L 21.522,0.932 C 20.267,-0.322 18.680,-0.308 17.412,0.960 L 0.839,17.532 C -0.280,18.652 -0.280,20.466 0.839,21.585 Z</Geometry>
    <Geometry x:Key="RepeatButton">M3.5445026,0 L7.0890052,7.0890053 L3.0459049E-09,7.0890053 z</Geometry>
    <Geometry x:Key="ComboBoxArrow">M-0,6 L-0,8 8,8 8,-0 6,-0 6,6 z</Geometry>


    <!--Colors-->
    <Color x:Key="DarkerColor">#191F24</Color>
    <Color x:Key="DarkBackgroundColor">#293239</Color>
    <Color x:Key="BackgroundColor">#333E46</Color>
    <Color x:Key="WindowBackgroundColor">#FF3C4952</Color>
    <Color x:Key="DisabledBackgroundColor">#FF455560</Color>
    <Color x:Key="LightBackgroundColor">#536570</Color>
    <Color x:Key="LightDisabledBackgroundColor">#667C8A</Color>
    <Color x:Key="ForegroundColor">#D7DDE1</Color>
    <!--Color x:Key="ForegroundDisableColor">#828D94</Color>-->
    <Color x:Key="ForegroundDisableColor">#96A5AF</Color>

    <!--<Color x:Key="DarkerColor">#101417</Color>
    <Color x:Key="DarkBackgroundColor">#243039</Color>
    <Color x:Key="BackgroundColor">#354755</Color>
    <Color x:Key="WindowBackgroundColor">#405667</Color>
    <Color x:Key="DisabledBackgroundColor">#4F6A80</Color>
    <Color x:Key="LightBackgroundColor">#6E8FA7</Color>
    <Color x:Key="LightDisabledBackgroundColor">#667C8A</Color>
    <Color x:Key="ForegroundColor">#D7DDE1</Color>
    <Color x:Key="ForegroundDisableColor">#828D94</Color>-->

    <!--Hihglight colors-->
    <!--<Color x:Key="HighlightColor">#5AAFEE</Color>
    <Color x:Key="HighlightColorHover">#25A2FF</Color>

    <Color x:Key="HighlightColorHover">#aba661</Color>
    <Color x:Key="HighlightColor">#989353</Color>
    <Color x:Key="HighlightColorDisabled">#8b874d</Color>

    <Color x:Key="HighlightColorHover">#BAB681</Color>
    <Color x:Key="HighlightColor">#969368</Color>
    <Color x:Key="HighlightColorDisabled">#8F8C65</Color>-->

    <Color x:Key="HighlightColorHover">#B4B084</Color>
    <Color x:Key="HighlightColor">#9F9C71</Color>
    <Color x:Key="HighlightColorDisabled">#8C8A65</Color>

    <!--Base Brushes-->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{StaticResource WindowBackgroundColor}"/>

    <SolidColorBrush x:Key="BackgroundLightBrush" Color="{StaticResource LightBackgroundColor}" />
    <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="BackgroundDarkBrush" Color="{StaticResource DarkBackgroundColor}"/>

    <SolidColorBrush x:Key="BorderLightBrush" Color="{StaticResource LightBackgroundColor}"/>
    <SolidColorBrush x:Key="BorderDarkBrush" Color="{StaticResource DarkerColor}"/>

    <SolidColorBrush x:Key="ForegroundBrush" Color="{StaticResource ForegroundColor}"/>
    <SolidColorBrush x:Key="ForegroundDisableBrush" Color="{StaticResource ForegroundDisableColor}"/>
    <SolidColorBrush x:Key="ForegroundMouseOverBrush" Color="{StaticResource DarkBackgroundColor}"/>

    <SolidColorBrush x:Key="ActiveBrush" Color="{StaticResource HighlightColor}"/>

    <SolidColorBrush x:Key="ButtonBackgroundMouseOver" Color="{StaticResource HighlightColor}" ice:Freeze="true"/>
    <SolidColorBrush x:Key="ButtonBackgroundPressed" Color="{StaticResource HighlightColorHover}" ice:Freeze="true"/>
    <SolidColorBrush x:Key="ButtonBackgroundDisabled" Color="{StaticResource DisabledBackgroundColor}" ice:Freeze="true"/>
    <SolidColorBrush x:Key="ButtonBackgroundChecked" Color="{StaticResource HighlightColor}" ice:Freeze="true"/>
    <SolidColorBrush x:Key="ButtonBackgroundCheckedMouseOver" Color="{StaticResource HighlightColorHover}" ice:Freeze="true"/>

    <SolidColorBrush x:Key="ButtonBorder" Color="{StaticResource DarkBackgroundColor}"/>
    <SolidColorBrush x:Key="ButtonBorderMouseOver" Color="{StaticResource HighlightColorHover}"/>
    <SolidColorBrush x:Key="ButtonBorderDisabled" Color="{StaticResource LightDisabledBackgroundColor}" />
    <SolidColorBrush x:Key="ButtonBorderHighlighted" Color="Black" ice:Freeze="true" />
    <SolidColorBrush x:Key="ButtonForegroundHighlighted" Color="Black" ice:Freeze="true" />

    <SolidColorBrush x:Key="GlyphBackgroundBrush" Color="{StaticResource ForegroundColor}" />
    <SolidColorBrush x:Key="GlyphHoverBackgroundBrush" Color="{StaticResource HighlightColor}" />
    <SolidColorBrush x:Key="GlyphPressedBackgroundBrush" Color="{StaticResource HighlightColorHover}" />
    <SolidColorBrush x:Key="GlyphDisabledBackgroundBrush" Color="{StaticResource ForegroundDisableColor}" />

    <SolidColorBrush x:Key="TabControlBackgroundBrush" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="TabControlBorderBrush" Color="{StaticResource DisabledBackgroundColor}"/>
    <SolidColorBrush x:Key="TabItemHotBackground" Color="{StaticResource HighlightColor}"/>
    <SolidColorBrush x:Key="TabItemSelectedBackground" Color="{StaticResource LightBackgroundColor}"/>
    <SolidColorBrush x:Key="TabItemHotBorderBrush" Color="{StaticResource HighlightColor}"/>
    <SolidColorBrush x:Key="TabItemDisabledBackground" Color="{StaticResource DarkBackgroundColor}"/>
    <SolidColorBrush x:Key="TabItemDisabledBorderBrush" Color="{StaticResource DarkBackgroundColor}"/>
    <SolidColorBrush x:Key="TabPanelHeaderBackground" Color="{StaticResource WindowBackgroundColor}"/>

    <SolidColorBrush x:Key="ScrollViewerBackground" Color="Transparent" />
    <SolidColorBrush x:Key="VerticalScrollBarBackground" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="HorizontalScrollBarBackground" Color="{StaticResource BackgroundColor}" />
    <SolidColorBrush x:Key="VerticalScrollBarThumb" Color="{StaticResource LightBackgroundColor}"/>
    <SolidColorBrush x:Key="ScrollBarDisabledBackground" Color="{StaticResource BackgroundColor}"/>
    <SolidColorBrush x:Key="ScrollBarHotThumb" Color="{StaticResource HighlightColor}"/>
    <SolidColorBrush x:Key="ScrollBarSelectedThumb" Color="{StaticResource HighlightColorHover}"/>
    <SolidColorBrush x:Key="CornerBorder" Color="{StaticResource DarkBackgroundColor}"/>


    <SolidColorBrush x:Key="TransparentBrush" Color="Transparent" />

    <SolidColorBrush x:Key="PanelBackground" Color="{StaticResource LightBackgroundColor}" ice:Freeze="true" />
    <SolidColorBrush x:Key="ApplicationBackground" Color="{StaticResource DarkBackgroundColor}" ice:Freeze="true" />

    <SolidColorBrush x:Key="MenuBackgroundBrush" Color="{StaticResource DarkBackgroundColor}"/>

    <!-- Gradients -->
    <LinearGradientBrush x:Key="ButtonBackground" StartPoint="0,0" EndPoint="0,1" >
        <GradientStop Color="{StaticResource BackgroundColor}" Offset="0" />
        <GradientStop Color="{StaticResource DarkBackgroundColor}" Offset="1" />
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HighlightGradientBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="{StaticResource HighlightColor}" Offset="0" />
                <GradientStop Color="{StaticResource HighlightColorHover}" Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HighlightExpanderHeaderBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="{StaticResource HighlightColorHover}" Offset="0" />
                <GradientStop Color="{StaticResource HighlightColorDisabled}" Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="ExpanderHeaderBrush" StartPoint="0,0" EndPoint="0,1" ice:Freeze="true">
        <LinearGradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="{StaticResource DisabledBackgroundColor}" Offset="0" />
                <GradientStop Color="{StaticResource WindowBackgroundColor}" Offset="1" />
            </GradientStopCollection>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!-- Basic style redefinition -->
    <!-- Window -->
    <Style TargetType="{x:Type Window}" x:Key="WindowStyle">
        <Setter Property="WindowStyle" Value="ToolWindow" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
        <Setter Property="FontSize" Value="{StaticResource FontSize}" />
        <Setter Property="FontFamily" Value="Segoe UI Semibold" />
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="Segoe UI Semibold" />
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                <Setter Property="FontFamily" Value="Segoe UI Semibold" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Separator -->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Grid SnapsToDevicePixels="true" Margin="0,6,0,4">
                        <Rectangle Height="1" Margin="30,0,1,1"  Fill="{StaticResource BackgroundDarkBrush}"/>
                        <Rectangle Height="1" Margin="30,1,1,0" Fill="{StaticResource BackgroundLightBrush}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Menu -->
    <Style TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>

        <Setter Property="BorderBrush" Value="{StaticResource BorderLightBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderBrush="{StaticResource BorderDarkBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ContextMenu -->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>

        <Setter Property="BorderBrush" Value="{StaticResource BorderLightBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border BorderBrush="{StaticResource BorderLightBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{StaticResource BackgroundDarkBrush}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="10" RenderingBias="Quality" ShadowDepth="0" Opacity="0.5" />
                        </Border.Effect>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- MenuItem Templates -->
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" Margin="1"/>
            <DockPanel>
                <ContentPresenter x:Name="Icon" 
                                        ContentSource="Icon"
                                        Margin="4,0,6,0" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                        VerticalAlignment="Center"/>
                <Path x:Name="GlyphPanel" 
                            Data="{StaticResource Checkmark}" 
                            Fill="{TemplateBinding Foreground}" 
                            FlowDirection="LeftToRight" 
                            Visibility="Collapsed"
                            Margin="5,0,0,0"
                            VerticalAlignment="Center" 
                            Height="7.5"
                            Stretch="Fill" 
                            Width="7.5"/>
                <ContentPresenter x:Name="Content" ContentSource="Header" 
                                        Margin="{TemplateBinding Padding}" 
                                        RecognizesAccessKey="True" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </DockPanel>
            <Popup x:Name="PART_Popup" 
                        AllowsTransparency="true" 
                        Focusable="false" 
                        HorizontalOffset="1" 
                        IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                        PopupAnimation="{StaticResource {x:Static SystemParameters.MenuPopupAnimationKey}}" 
                        Placement="Bottom"
                        VerticalOffset="-1">
                <Border x:Name="Shdw" Background="Transparent">
                    <Border x:Name="SubMenuBorder" BorderBrush="{StaticResource BorderLightBrush}" BorderThickness="0" Background="{StaticResource BackgroundDarkBrush}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" 
                                            Margin="0" 
                                            Style="{StaticResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left" 
                                            Height="0" 
                                            VerticalAlignment="Top" 
                                            Width="0">
                                    <Rectangle x:Name="OpaqueRect" 
                                                    Fill="{StaticResource BackgroundDarkBrush}" 
                                                    Height="{Binding ActualHeight, ElementName=SubMenuBorder}" 
                                                    Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" 
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    Grid.IsSharedSizeScope="true" 
                                                    Margin="0" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                    KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <Border.Effect>
                        <DropShadowEffect BlurRadius="10" RenderingBias="Quality" ShadowDepth="0" Opacity="0.5" />
                    </Border.Effect>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Background" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource ActiveBrush}"/>
                <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{StaticResource ForegroundMouseOverBrush}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource ForegroundMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource ActiveBrush}"/>
            </Trigger>
            <Trigger Property="IsSubmenuOpen" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource ActiveBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource ForegroundDisableBrush}"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="Bg"
                            Fill="{TemplateBinding Background}"
                            Margin="1"/>
            <DockPanel>
                <ContentPresenter x:Name="Icon"
                                        ContentSource="Icon"
                                        Margin="4,0,6,0"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        VerticalAlignment="Center"/>
                <Path x:Name="GlyphPanel"
                            Data="{StaticResource Checkmark}"
                            Fill="{TemplateBinding Foreground}"
                            FlowDirection="LeftToRight"
                            Margin="5,0,0,0"
                            VerticalAlignment="Center" 
                            Height="7.5"
                            Stretch="Fill" 
                            Width="7.5"
                            Visibility="Collapsed"/>
                <ContentPresenter ContentSource="Header"
                                        Margin="{TemplateBinding Padding}"
                                        RecognizesAccessKey="True"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource ActiveBrush}"/>
                <Setter Property="TextBlock.Foreground" Value="{StaticResource ForegroundMouseOverBrush}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource ForegroundMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource ActiveBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                <Setter Property="Fill" TargetName="GlyphPanel" Value="{StaticResource ForegroundDisableBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}"
                            StrokeThickness="1"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="14" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="37"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                                        ContentSource="Icon"
                                        Margin="1" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                        VerticalAlignment="Center"/>
                <Border x:Name="GlyphPanel" 
                            Background="Transparent"
                            Margin="1" 
                            Visibility="Hidden">
                    <Path x:Name="Glyph" 
                                Data="{StaticResource Checkmark}"
                                Fill="{StaticResource ForegroundBrush}" 
                                FlowDirection="LeftToRight" 
                                Margin="5,0,0,0"
                                VerticalAlignment="Center" 
                                Height="7.5"
                                Stretch="Fill" 
                                Width="7.5"/>
                </Border>
                <ContentPresenter x:Name="Content" Grid.Column="2"
                                        ContentSource="Header" 
                                        Margin="{TemplateBinding Padding}" 
                                        RecognizesAccessKey="True" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <TextBlock  Grid.Column="4"
                                Margin="{TemplateBinding Padding}" 
                                Text="{TemplateBinding InputGestureText}"
                                Visibility="Collapsed"/>
                <Path x:Name="RightArrowPath" Grid.Column="5" 
                            Data="{StaticResource RightArrow}"
                            Fill="{TemplateBinding Foreground}" 
                            Margin="4,0,0,0" 
                            VerticalAlignment="Center"/>
            </Grid>
            <Popup x:Name="PART_Popup" 
                        AllowsTransparency="true" 
                        Focusable="false" 
                        HorizontalOffset="-4" 
                        IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                        PopupAnimation="{StaticResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                        Placement="Right" 
                        VerticalOffset="0">
                <Border x:Name="Shdw" Background="Transparent">
                    <Border x:Name="SubMenuBorder" 
                                BorderBrush="{StaticResource BorderLightBrush}"
                                BorderThickness="0"
                                Background="{StaticResource BackgroundDarkBrush}">
                        <ScrollViewer x:Name="SubMenuScrollViewer" 
                                            Margin="0" 
                                            Style="{StaticResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                            <Grid RenderOptions.ClearTypeHint="Enabled">
                                <Canvas HorizontalAlignment="Left"
                                            Height="0"
                                            VerticalAlignment="Top"
                                            Width="0">
                                    <Rectangle x:Name="OpaqueRect"	
                                                    Fill="{StaticResource BackgroundDarkBrush}" 
                                                    Height="{Binding ActualHeight, ElementName=SubMenuBorder}"
                                                    Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" 
                                                    KeyboardNavigation.DirectionalNavigation="Cycle"
                                                    Grid.IsSharedSizeScope="true" 
                                                    Margin="0" 
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                    KeyboardNavigation.TabNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                    <Border.Effect>
                        <DropShadowEffect BlurRadius="10" RenderingBias="Quality" ShadowDepth="0" Opacity="0.5" />
                    </Border.Effect>
                </Border>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter Property="PopupAnimation" TargetName="PART_Popup" Value="None"/>
            </Trigger>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                <Setter Property="Background" TargetName="Shdw" Value="#71000000"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource ActiveBrush}"/>
                <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{StaticResource ForegroundMouseOverBrush}"/>
                <Setter Property="Fill" TargetName="RightArrowPath" Value="{StaticResource ForegroundMouseOverBrush}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource ForegroundMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource ForegroundDisableBrush}"/>
            </Trigger>
            <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="{ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}" TargetType="{x:Type MenuItem}">
        <Grid SnapsToDevicePixels="true">
            <Rectangle x:Name="Bg" Fill="{TemplateBinding Background}" />
            <Rectangle x:Name="InnerBorder" Margin="0"/>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition MinWidth="14" SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="4"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="37"/>
                    <ColumnDefinition SharedSizeGroup="MenuItemIGTColumnGroup" Width="Auto"/>
                    <ColumnDefinition Width="17"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon" 
                                      ContentSource="Icon" 
                                      Margin="1" 
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                      VerticalAlignment="Center"/>
                <Border x:Name="GlyphPanel" 
                            BorderBrush="Transparent"
                            Margin="1" Visibility="Hidden">
                    <Path x:Name="Glyph" 
                                Data="{StaticResource Checkmark}" 
                                Fill="{StaticResource ForegroundBrush}" 
                                FlowDirection="LeftToRight"
                                Margin="5,0,0,0"
                                VerticalAlignment="Center" 
                                Height="7.5"
                                Stretch="Fill" 
                                Width="7.5"/>
                </Border>
                <ContentPresenter x:Name="Content"  Grid.Column="2" 
                                      ContentSource="Header"
                                      Margin="{TemplateBinding Padding}"
                                      RecognizesAccessKey="True" 
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                <TextBlock Grid.Column="4" 
                               Margin="{TemplateBinding Padding}"
                               Text="{TemplateBinding InputGestureText}"/>
            </Grid>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter Property="Visibility" TargetName="GlyphPanel" Value="Visible"/>
                <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter Property="Fill" TargetName="Bg" Value="{StaticResource ActiveBrush}"/>
                <Setter Property="TextBlock.Foreground" TargetName="Content" Value="{StaticResource ForegroundMouseOverBrush}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource ForegroundMouseOverBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                <Setter Property="Fill" TargetName="Glyph" Value="{StaticResource ForegroundDisableBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem -->
    <Style TargetType="{x:Type MenuItem}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="MinHeight" Value="21"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=SubmenuItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Padding" Value="7,6,8,3"/>
                <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=TopLevelHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Padding" Value="7,6,8,6"/>
                <Setter Property="Margin"  Value="-4,0"/>
                <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=TopLevelItemTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Padding" Value="2,4,2,2"/>
                <Setter Property="Margin"  Value="-4,0"/>
                <Setter Property="Template" Value="{StaticResource {ComponentResourceKey ResourceId=SubmenuHeaderTemplateKey, TypeInTargetAssembly={x:Type MenuItem}}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Padding" Value="2,4,2,2"/>
                <Setter Property="Margin"  Value="-4,0"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Label -->
    <Style TargetType="{x:Type Label}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="BorderBrush" Value="{StaticResource BorderLightBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{StaticResource BorderLightBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.8" />
                            <!--<Setter Property="TextBlock.Foreground" Value="Red" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ProgressBar -->
    <Style TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource ActiveBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource BorderDarkBrush}" />
        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Grid Margin="1">
                        <Rectangle x:Name="opacityMask" RadiusX="3" RadiusY="3" Fill="{TemplateBinding Background}" Margin="0" />
                        <Grid Margin="-1">
                            <Grid.OpacityMask>
                                <VisualBrush Visual="{Binding ElementName=opacityMask}" />
                            </Grid.OpacityMask>
                            <Rectangle x:Name="PART_Track" RadiusX="{Binding ElementName=opacityMask, Path=RadiusX}"
                                    RadiusY="{Binding ElementName=opacityMask, Path=RadiusY}"
                                    Stroke="{StaticResource BorderDarkBrush}" StrokeThickness="1"
                                    Fill="{TemplateBinding Background}" Height="8"/>
                            <Rectangle x:Name="PART_Indicator" RadiusX="{Binding ElementName=opacityMask, Path=RadiusX}"
                                    RadiusY="{Binding ElementName=opacityMask, Path=RadiusY}"
                                    Stroke="{StaticResource BorderDarkBrush}" StrokeThickness="1"
                                    HorizontalAlignment="Left" Fill="{TemplateBinding Foreground}" />
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StatusBar -->
    <Style TargetType="{x:Type StatusBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Height" Value="28"/>
        <Setter Property="Margin" Value="1,0,3,0"/>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="BorderThickness" Value="0,1,0,1" />
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBar}">
                    <Border BorderBrush="{StaticResource BorderDarkBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StatusBarItem -->
    <Style TargetType="{x:Type StatusBarItem}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type StatusBarItem}">
                    <ContentPresenter Margin="3" Name="ContentSite" />
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ResizeGrip -->
    <Style TargetType="{x:Type ResizeGrip}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Image Source="pack://application:,,,/Fei.SliceAndView.Common;component/Images/ResizeGrip.png" Stretch="None" Margin="0,0,-7,-7"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBox -->
    <Style TargetType="{x:Type TextBox}"  >
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2,1,0,0"/>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Height" Value="24" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="Border.CornerRadius" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="FontFamily" Value="Segoe UI Semibold"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="Bd" CornerRadius="{TemplateBinding Border.CornerRadius}"
                                BorderBrush="{StaticResource BorderDarkBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Margin="{TemplateBinding Padding}" />
                        </Border>
                        <Border x:Name="ErrorBorder" CornerRadius="{TemplateBinding Border.CornerRadius}" Opacity="0.0"
                                BorderBrush="Red" BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True" Width="{Binding ElementName=Bd, Path=ActualWidth}"
                                Height="{Binding ElementName=Bd, Path=ActualHeight}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                            <!--<Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
                            <Setter Property="BorderBrush" Value="{StaticResource ButtonBorder}"/>-->
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="Black" />
                        </Trigger>

                        <!-- valid value recovery-->
                        <Trigger Property="Validation.HasError" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames BeginTime="0:0:0" Duration="0:0:0"
                                                Storyboard.TargetProperty="(validation:ErrorRecovery.ProcessRecovery)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="False" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--animation-->
                                        <DoubleAnimation BeginTime="0:0:0.0" To="1.0" Duration="0:0:0"
                                                Storyboard.TargetName="ErrorBorder" Storyboard.TargetProperty="Opacity" />
                                        <DoubleAnimation BeginTime="0:0:0.2" Duration="0:0:1.0"
                                                Storyboard.TargetName="ErrorBorder" Storyboard.TargetProperty="Opacity" />
                                        <!--end of animation-->

                                        <!--restore value-->
                                        <BooleanAnimationUsingKeyFrames BeginTime="0:0:0.4" Duration="0:0:0"
                                                Storyboard.TargetProperty="(validation:ErrorRecovery.ProcessRecovery)">
                                            <!-- performs value recovery from view model -->
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- PasswordBox -->
    <Style TargetType="{x:Type PasswordBox}">
        <Setter Property="PasswordChar" Value="•"/>
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="2,1,0,0"/>
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="AllowDrop" Value="True"/>
        <Setter Property="MinHeight" Value="24"/>
        <Setter Property="Height" Value="24" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
        <Setter Property="Border.CornerRadius" Value="2"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Grid>
                        <Border x:Name="Bd" CornerRadius="{TemplateBinding Border.CornerRadius}"
                                BorderBrush="{StaticResource BorderDarkBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    Margin="{TemplateBinding Padding}" />
                        </Border>
                        <Border x:Name="ErrorBorder" CornerRadius="{TemplateBinding Border.CornerRadius}" Opacity="0.0"
                                BorderBrush="Red" BorderThickness="{TemplateBinding BorderThickness}"
                                SnapsToDevicePixels="True" Width="{Binding ElementName=Bd, Path=ActualWidth}"
                                Height="{Binding ElementName=Bd, Path=ActualHeight}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="Black" />
                        </Trigger>

                        <!-- valid value recovery-->
                        <Trigger Property="Validation.HasError" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames BeginTime="0:0:0" Duration="0:0:0"
                                                Storyboard.TargetProperty="(validation:ErrorRecovery.ProcessRecovery)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="False" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--animation-->
                                        <DoubleAnimation BeginTime="0:0:0.0" To="1.0" Duration="0:0:0"
                                                Storyboard.TargetName="ErrorBorder" Storyboard.TargetProperty="Opacity" />
                                        <DoubleAnimation BeginTime="0:0:0.2" Duration="0:0:1.0"
                                                Storyboard.TargetName="ErrorBorder" Storyboard.TargetProperty="Opacity" />
                                        <!--end of animation-->

                                        <!--restore value-->
                                        <BooleanAnimationUsingKeyFrames BeginTime="0:0:0.4" Duration="0:0:0"
                                                Storyboard.TargetProperty="(validation:ErrorRecovery.ProcessRecovery)">
                                            <!-- performs value recovery from view model -->
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--- ButtonFocusVisual -->
    <Style x:Key="ButtonFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border>
                        <Rectangle Margin="2" StrokeThickness="1" Stroke="#e0000000" StrokeDashArray="1 2" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ButtonBase -->
    <Style TargetType="ButtonBase" >
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Height" Value="24" />
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="Padding" Value="10,0,10,1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border x:Name="ButtonBorder" CornerRadius="2"
                            TextBlock.Foreground="{StaticResource ForegroundBrush}" 
                            SnapsToDevicePixels="True"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                        <ContentPresenter x:Name="ButtonContent" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundMouseOver}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderHighlighted}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundPressed}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderMouseOver}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Button -->
    <Style TargetType="Button" BasedOn="{StaticResource {x:Type ButtonBase}}" />

    <!-- ToggleButton -->
    <Style TargetType="ToggleButton" BasedOn="{StaticResource {x:Type ButtonBase}}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border TextBlock.Foreground="{StaticResource ForegroundBrush}" 
                            x:Name="ButtonBorder" CornerRadius="2"
                            Background="{StaticResource ButtonBackground}" BorderBrush="{StaticResource BackgroundDarkBrush}"
                            BorderThickness="1">
                        <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center"
                                RecognizesAccessKey="True" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundChecked}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorder}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundMouseOver}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderHighlighted}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundPressed}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderHighlighted}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundCheckedMouseOver}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderHighlighted}" />
                        </MultiTrigger>
                        <!--<MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="true" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>

                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundPressedWhileChecked}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ControlBorderHighlighted}" />
                        </MultiTrigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxToggleButton -->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDarkBrush}"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="MinHeight" Value="24" />
        <Setter Property="Padding" Value="10,0,10,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border  
                        BorderBrush="{StaticResource BorderDarkBrush}" 
                        Background="{TemplateBinding Background}" 
                        BorderThickness="1"
                        SnapsToDevicePixels="true"
                        CornerRadius="2">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          Margin="{TemplateBinding Padding}" 
                                          RecognizesAccessKey="True" 
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource ActiveBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Opacity" Value="0.7" />-->
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Background" Value="{StaticResource ActiveBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxReadonlyToggleButton -->
    <Style x:Key="ComboBoxReadonlyToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Padding" Value="10,0,10,1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border  
                        CornerRadius="3"             
                        BorderBrush="{StaticResource BorderDarkBrush}" BorderThickness="1"
                        Background="{TemplateBinding Background}" 
                        SnapsToDevicePixels="true">
                        <Border x:Name="PopUpButton"
                            HorizontalAlignment="Right"
                            Background="Transparent"
                            CornerRadius="2"
                            Margin="0"
                            Width="21">
                            <Path x:Name="Arrow" Data="{StaticResource ComboBoxArrow}" 
                                HorizontalAlignment="Center" 
                                VerticalAlignment="Center"
                                Width="7"
                                Height="7" 
                                Stretch="Fill" 
                                Fill="{StaticResource ForegroundBrush}"
                                RenderTransformOrigin="0.5,0.5" 
                                Margin="0,0,0,2">
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="45"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="PopUpButton" Value="{StaticResource ActiveBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Opacity" Value="0.7" />-->
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxFocusVisual -->
    <Style x:Key="ComboBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="4,4,21,4" SnapsToDevicePixels="true" Stroke="{StaticResource ForegroundBrush}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxItem -->
    <Style TargetType="ComboBoxItem">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="Border"  Padding="2" SnapsToDevicePixels="true" Background="Transparent">
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">

                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Border" Value="{StaticResource ButtonBorderMouseOver}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBox -->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ComboBoxFocusVisual}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="Padding" Value="5,3,5,1"/>
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="Height" Value="24" />
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="MainGrid" SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition MinWidth="18" Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Popup x:Name="PART_Popup" 
                            AllowsTransparency="true" 
                            Grid.ColumnSpan="2"
                            IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                            Margin="1" 
                            PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" 
                            Placement="Bottom">
                            <Border x:Name="Shdw" Background="{StaticResource ButtonBackground}" MaxHeight="{TemplateBinding MaxDropDownHeight}" 
                                MinWidth="{Binding ActualWidth, ElementName=MainGrid}">
                                <Border.Effect>
                                    <DropShadowEffect BlurRadius="10" RenderingBias="Quality" ShadowDepth="0" Opacity="0.5" />
                                </Border.Effect>
                                <Border x:Name="DropDownBorder" 
                                    BorderBrush="{StaticResource BackgroundDarkBrush}" 
                                    BorderThickness="1" 
                                    Background="{StaticResource BackgroundDarkBrush}">
                                    <ScrollViewer x:Name="DropDownScrollViewer">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" 
                                                Height="0" 
                                                VerticalAlignment="Top" 
                                                Width="0">
                                                <Rectangle x:Name="OpaqueRect" 
                                                    Fill="{Binding Background, ElementName=DropDownBorder}" 
                                                    Height="{Binding ActualHeight, ElementName=DropDownBorder}" 
                                                    Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                            </Canvas>
                                            <ItemsPresenter x:Name="ItemsPresenter" 
                                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Border>
                        </Popup>
                        <ToggleButton BorderBrush="{StaticResource BackgroundDarkBrush}" 
                            Background="{StaticResource BackgroundBrush}" 
                            Grid.ColumnSpan="2" 
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource ComboBoxReadonlyToggleButton}"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Content="{TemplateBinding SelectionBoxItem}" 
                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                            IsHitTestVisible="false" 
                            Margin="{TemplateBinding Padding}" 
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                            <Setter Property="Margin" TargetName="Shdw" Value="0,0,5,5"/>
                            <Setter Property="Background" TargetName="Shdw" Value="#71000000"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <!--<Setter Property="Opacity" Value="0.7" />-->
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="BorderBrush" Value="{StaticResource BorderDarkBrush}"/>
                <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.WindowBrushKey}}"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Padding" Value="3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="ContentPresenter.Opacity" Value="0.7" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- EmptyCheckBoxFocusVisual -->
    <Style x:Key="EmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="1" 
                                    SnapsToDevicePixels="true" 
                                    Stroke="{StaticResource BorderDarkBrush}" 
                                    StrokeThickness="1" 
                                    StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CheckRadioFocusVisual -->
    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0"
                                    SnapsToDevicePixels="true" 
                                    Stroke="{StaticResource BorderDarkBrush}" 
                                    StrokeThickness="1" 
                                    StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- CheckBox -->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDarkBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="CheckBoxBorder"
                                        Height="16"
                                        Width="16"
                                        BorderBrush="{StaticResource BorderDarkBrush}" 
                                        BorderThickness="1"
                                        Background="{TemplateBinding Background}">
                                <Path x:Name="CheckMark"  
                                            Data="{StaticResource CheckBoxCheckmark}" 
                                            Height="Auto" 
                                            Width="Auto" 
                                            Stretch="Fill" 
                                            Fill="{StaticResource ActiveBrush}"
                                            Margin="2"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                Margin="{TemplateBinding Padding}" 
                                                RecognizesAccessKey="True" 
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource ActiveBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RadioFocusVisual -->
    <Style x:Key="RadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0" 
                                    SnapsToDevicePixels="true" 
                                    Stroke="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" 
                                    StrokeThickness="1" 
                                    StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- RadioButton -->
    <Style TargetType="{x:Type RadioButton}">
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDarkBrush}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <BulletDecorator Background="Transparent">
                        <BulletDecorator.Bullet>
                            <Border x:Name="RadioButtonBorder"
                                    Width="18"
                                    Height="18"
                                    CornerRadius="9"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{StaticResource BorderDarkBrush}"
                                    Background="{TemplateBinding Background}">
                                <Border x:Name="RadioMark"
                                        Width="6"
                                        Height="6"
                                        CornerRadius="6"
                                        BorderBrush="{StaticResource ForegroundBrush}"
                                        Background="{StaticResource ActiveBrush}"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource RadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.7"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="RadioButtonBorder" Value="{StaticResource ActiveBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="RadioMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ToolTip -->
    <Style TargetType="ToolTip">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Label Content="{TemplateBinding Content}" FontWeight="Bold" Background="{StaticResource BackgroundBrush}" Foreground="{StaticResource ForegroundBrush}" BorderThickness="0.5" BorderBrush="Black" Padding="9" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ExpanderRightHeaderStyle -->
    <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{StaticResource TransparentBrush}" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="-90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle x:Name="rectangle" Width="30" Height="30" Fill="{StaticResource BackgroundLightBrush}" HorizontalAlignment="Center" StrokeThickness="0" Stroke="{StaticResource WindowBackgroundBrush}" VerticalAlignment="Center" />
                                <Path x:Name="arrow" Width="10" Height="6" Fill="{StaticResource GlyphBackgroundBrush}" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " Stretch="Fill" RenderTransformOrigin="0.5, 0.5" />
                            </Grid>
                            <ContentPresenter HorizontalAlignment="Center" Margin="0,4,0,0" Grid.Row="1" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Stretch" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M3.4,-4.4 L6.8,3.9 3.9566912E-07,3.9 z" />
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource WindowBackgroundBrush}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{StaticResource WindowBackgroundBrush}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ButtonBackground}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{StaticResource ButtonBackground}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                            <Setter Property="BorderThickness" Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ExpanderUpHeaderStyle -->
    <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{StaticResource TransparentBrush}" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="180" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle x:Name="rectangle" Width="30" Height="30" Fill="{StaticResource WindowBackgroundBrush}" HorizontalAlignment="Center" StrokeThickness="0" Stroke="{StaticResource WindowBackgroundBrush}" VerticalAlignment="Center" />
                                <Path x:Name="arrow" Width="10" Height="6" Fill="{StaticResource GlyphBackgroundBrush}" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " Stretch="Fill" RenderTransformOrigin="0.5, 0.5" />
                            </Grid>
                            <ContentPresenter Grid.Column="1" HorizontalAlignment="Stretch" Margin="4,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M3.4,-4.4 L6.8,3.9 3.9566912E-07,3.9 z" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource WindowBackgroundBrush}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{StaticResource WindowBackgroundBrush}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ButtonBackground}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{StaticResource ButtonBackground}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ExpanderLeftHeaderStyle -->
    <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="{TemplateBinding Padding}">
                        <Grid Background="{StaticResource TransparentBrush}" SnapsToDevicePixels="False">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.LayoutTransform>
                                    <TransformGroup>
                                        <TransformGroup.Children>
                                            <TransformCollection>
                                                <RotateTransform Angle="90" />
                                            </TransformCollection>
                                        </TransformGroup.Children>
                                    </TransformGroup>
                                </Grid.LayoutTransform>
                                <Rectangle x:Name="rectangle" Width="30" Height="30" Fill="{StaticResource WindowBackgroundBrush}" HorizontalAlignment="Center" Stroke="{StaticResource WindowBackgroundBrush}" VerticalAlignment="Center" />
                                <Path x:Name="arrow" Width="10" Height="6" Fill="{StaticResource GlyphBackgroundBrush}" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " Stretch="Fill" RenderTransformOrigin="0.5, 0.5" />
                            </Grid>
                            <ContentPresenter Grid.Row="1" HorizontalAlignment="Center" Margin="0,4,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Stretch" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Data" TargetName="arrow" Value="M3.4,-4.4 L6.8,3.9 3.9566912E-07,3.9 z" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource WindowBackgroundBrush}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{StaticResource WindowBackgroundBrush}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ButtonBackground}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{StaticResource ButtonBackground}" />
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ExpanderDownHeaderStyle -->
    <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Padding="0">
                        <Grid Background="{StaticResource WindowBackgroundBrush}" SnapsToDevicePixels="False">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="30" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="1"/>
                                <RowDefinition Height="30"/>
                                <RowDefinition Height="1"/>
                            </Grid.RowDefinitions>
                            <Rectangle x:Name="borderTop" Height="1" Fill="{StaticResource BackgroundLightBrush}" HorizontalAlignment="Stretch" Grid.Row="0" Grid.ColumnSpan="2"/>
                            <Rectangle x:Name="rectangle" Width="30" Height="30" Grid.Row="1" Fill="{StaticResource WindowBackgroundBrush}" HorizontalAlignment="Center" StrokeThickness="0" Stroke="{StaticResource WindowBackgroundBrush}" VerticalAlignment="Center"/>
                            <Path x:Name="arrow" Width="12" Height="7" Fill="{StaticResource GlyphBackgroundBrush}" Data="{StaticResource DownArrow}" Stretch="Fill" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,1,0,1" RenderTransformOrigin="0.5,0.5" >
                                <Path.RenderTransform>
                                    <RotateTransform Angle="0"/>
                                </Path.RenderTransform>
                            </Path>
                            <Rectangle x:Name="contentPresenter" Grid.Column="1" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Fill="{StaticResource WindowBackgroundBrush}"/>
                            <ContentPresenter Grid.Column="1" Grid.Row="1" HorizontalAlignment="Stretch" Margin="10,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center" TextElement.FontFamily="Segoe UI Light" TextElement.FontSize="16" TextElement.FontWeight="Light" />
                            <Rectangle x:Name="borderBottom" Height="1" Fill="{StaticResource BackgroundDarkBrush}" HorizontalAlignment="Stretch" Grid.Row="2" Grid.ColumnSpan="2"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Fill" TargetName="rectangle" Value="{StaticResource ExpanderHeaderBrush}" />
                            <Setter Property="Stroke" TargetName="rectangle" Value="{StaticResource ExpanderHeaderBrush}" />
                            <Setter Property="Fill" TargetName="contentPresenter" Value="{StaticResource ExpanderHeaderBrush}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="180" Duration="0:0:0.4">
                                            <DoubleAnimation.EasingFunction >
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="0" Duration="0:0:0.4">
                                            <DoubleAnimation.EasingFunction >
                                                <CubicEase EasingMode="EaseOut" />
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ActiveBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Expander -->
    <Style TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="{StaticResource BackgroundLightBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{StaticResource BorderDarkBrush}" BorderThickness="1,0,1,1" Background="{TemplateBinding Background}" CornerRadius="0" SnapsToDevicePixels="true">
                        <VisualStateManager.CustomVisualStateManager>
                            <is:ExtendedVisualStateManager/>
                        </VisualStateManager.CustomVisualStateManager>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ExpansionStates" is:ExtendedVisualStateManager.UseFluidLayout="True">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0:0:0.3"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Expanded">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Height)" Storyboard.TargetName="_expanderContent">
                                            <DiscreteDoubleKeyFrame KeyTime="0" Value="NaN" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Collapsed"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid Name="MainGrid">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Name="ContentRow" Height="Auto" />
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Border>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="Auto" />
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton x:Name="HeaderSite"
                              ContentTemplate="{TemplateBinding HeaderTemplate}"
                              ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                              Content="{TemplateBinding Header}"
                              DockPanel.Dock="Top"
                              Foreground="{TemplateBinding Foreground}"
                              FontWeight="{TemplateBinding FontWeight}"
                              FontStyle="{TemplateBinding FontStyle}"
                              FontStretch="{TemplateBinding FontStretch}"
                              FontFamily="{TemplateBinding FontFamily}"
                              HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Margin="0"
                              MinWidth="0"
                              MinHeight="0"
                              Padding="{TemplateBinding Padding}"
                              Style="{StaticResource ExpanderDownHeaderStyle}"
                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                </Grid>
                            </Border>

                            <ContentPresenter x:Name="_expanderContent" Grid.Row="1"
                                      Focusable="false" Height="0"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Border>
                </ControlTemplate> -->
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Border BorderBrush="{StaticResource BorderDarkBrush}" BorderThickness="1,0,1,0"  Background="{TemplateBinding Background}" CornerRadius="0" SnapsToDevicePixels="true">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}" 
                                          Content="{TemplateBinding Header}" 
                                          DockPanel.Dock="Top" 
                                          Foreground="{TemplateBinding Foreground}" 
                                          FontWeight="{TemplateBinding FontWeight}" 
                                          FontStyle="{TemplateBinding FontStyle}" 
                                          FontStretch="{TemplateBinding FontStretch}" 
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                          IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                          Margin="0" 
                                          MinWidth="0" 
                                          MinHeight="0" 
                                          Padding="{TemplateBinding Padding}" 
                                          Style="{StaticResource ExpanderDownHeaderStyle}" 
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <ContentPresenter x:Name="ExpandSite" 
                                              DockPanel.Dock="Bottom" 
                                              Focusable="false" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                              Margin="{TemplateBinding Padding}" 
                                              Visibility="Collapsed" 
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" >
                            </ContentPresenter>

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="true">
                            <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left" />
                            <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right" />
                            <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <!-- TabControl -->
    <Style TargetType="{x:Type TabControl}">
        <Style.Resources>
            <Style x:Key="BottomStyle" TargetType="{x:Type FrameworkElement}">
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                <Setter Property="RenderTransform">
                    <Setter.Value>
                        <TransformGroup>
                            <ScaleTransform ScaleY="-1" ScaleX="1"/>
                            <SkewTransform AngleY="0" AngleX="0"/>
                            <RotateTransform Angle="0"/>
                            <TranslateTransform />
                        </TransformGroup>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="RightStyle" TargetType="{x:Type FrameworkElement}" />

            <Style x:Key="RoundedCornerLeftStyle" TargetType="{x:Type FrameworkElement}">
                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
            </Style>

            <Style x:Key="LeftStyle" TargetType="{x:Type FrameworkElement}" />

            <Style x:Key="DefaultStyle" TargetType="{x:Type FrameworkElement}">
                <Setter Property="LayoutTransform">
                    <Setter.Value>
                        <RotateTransform Angle="0" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TabItemFocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="3,3,3,1" SnapsToDevicePixels="true"
                                       Stroke="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"
                                       StrokeThickness="1" StrokeDashArray="1 2"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type TabItem}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource TabItemFocusVisual}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
                <Setter Property="Padding" Value="6,4,6,4"/>
                <Setter Property="BorderBrush" Value="{StaticResource WindowBackgroundBrush}"/>
                <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid x:Name="Container">
                                <Grid x:Name="Grid" SnapsToDevicePixels="true" Margin="0,0,2,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>
                                    <Border x:Name="Bd"
                                        Grid.Column="0"
                                        CornerRadius="3,3,0,0"
                                        BorderBrush="{StaticResource WindowBackgroundBrush}"
                                        BorderThickness="0"
                                        Background="{TemplateBinding Background}"
                                        Padding="{TemplateBinding Padding}" Margin="0,3,0,0">

                                        <ContentPresenter x:Name="Content" Margin="6,1,6,1" ContentSource="Header"
                                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                            RecognizesAccessKey="True" TextElement.FontFamily="Segoe UI SemiBold" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}">
                                            <ContentPresenter.Resources>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Setter Property="FontFamily" Value="Segoe UI Light"/>
                                                    <Setter Property="FontSize" Value="15"/>
                                                </Style>
                                            </ContentPresenter.Resources>
                                        </ContentPresenter>
                                    </Border>

                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItemHotBackground}"/>

                                </Trigger>
                                <Trigger Property="IsSelected" Value="true">
                                    <Setter Property="Panel.ZIndex" Value="1"/>
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItemSelectedBackground}"/>

                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="false"/>
                                        <Condition Property="IsMouseOver" Value="true"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource TabItemHotBorderBrush}"/>

                                </MultiTrigger>
                                <Trigger Property="TabStripPlacement" Value="Bottom">
                                    <!--<Setter Property="BorderThickness" TargetName="Bd" Value="1,0,1,1"/>-->

                                    <Setter Property="Style" TargetName="Bd" Value="{StaticResource BottomStyle}"/>
                                    <Setter Property="Style" TargetName="Content" Value="{StaticResource BottomStyle}"/>
                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Left">
                                    <!--<Setter Property="BorderThickness" TargetName="Bd" Value="1,1,0,1"/>-->
                                    <Setter Property="Grid.Row" TargetName="Bd" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="Bd" Value="0"/>

                                    <Setter Property="Style" TargetName="Bd" Value="{StaticResource LeftStyle}"/>
                                    <Setter Property="Style" TargetName="Content" Value="{StaticResource DefaultStyle}"/>
                                    <Setter Property="Margin" TargetName="Grid" Value="0,1,0,1"/>
                                    <Setter Property="CornerRadius" TargetName="Bd" Value="3 0 0 3"/>

                                </Trigger>
                                <Trigger Property="TabStripPlacement" Value="Right">
                                    <!--<Setter Property="BorderThickness" TargetName="Bd" Value="0,1,1,1"/>-->
                                    <Setter Property="Grid.Row" TargetName="Bd" Value="0"/>
                                    <Setter Property="Grid.Column" TargetName="Bd" Value="1"/>
                                    <Setter Property="Style" TargetName="Bd" Value="{StaticResource RightStyle}"/>
                                    <Setter Property="Style" TargetName="Content" Value="{StaticResource DefaultStyle}"/>
                                    <Setter Property="Margin" TargetName="Grid" Value="1,1,2,0"/>
                                    <Setter Property="CornerRadius" TargetName="Bd" Value="0 3 3 0"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="TabStripPlacement" Value="Top"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin"  Value="0,0,0,-1"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="TabStripPlacement" Value="Bottom"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin" Value="0,-1,0,0"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="TabStripPlacement" Value="Left"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin" Value="0,0,-1,0"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="true"/>
                                        <Condition Property="TabStripPlacement" Value="Right"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Margin" Value="-1,0,0,0"/>
                                </MultiTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource TabItemDisabledBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource TabItemDisabledBorderBrush}"/>
                                    <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <!--<Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}"/>-->
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="{StaticResource WindowBackgroundBrush}"/>
        <Setter Property="Background" Value="{StaticResource TabItemSelectedBackground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true"
                            Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1" Background="{StaticResource TabPanelHeaderBackground}"/>
                        <Border x:Name="ContentPanel"
                            BorderBrush="{StaticResource WindowBackgroundBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Grid.Column="0"
                            Grid.Row="1"
                            KeyboardNavigation.DirectionalNavigation="Contained"
                            KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost"
                                ContentSource="SelectedContent"
                                Margin="{TemplateBinding Padding}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <!--<Setter Property="Margin" TargetName="HeaderPanel" Value="2,0,2,2"/>-->
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <Setter Property="HorizontalContentAlignment" Value="Left" />
                            <Setter Property="Margin" TargetName="HeaderPanel" Value="0,-4"/>
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="HeaderPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="ContentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <!--<Setter Property="Margin" TargetName="HeaderPanel" Value="0,2,2,2"/>-->
                            <Setter Property="Grid.Column" TargetName="HeaderPanel" Value="1"/>

                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ScrollBar -->
    <Style TargetType="{x:Type ScrollViewer}">
        <Setter Property="Background" Value="{DynamicResource ScrollViewerBackground}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Rectangle x:Name="Corner"
                            Grid.Column="1"
                            Grid.Row="1"
                            Fill="{TemplateBinding Background}"/>
                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            CanHorizontallyScroll="False"
                            CanVerticallyScroll="False"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Content="{TemplateBinding Content}"
                            Grid.Column="0"
                            Grid.Row="0"
                            Margin="{TemplateBinding Padding}"/>
                        <ScrollBar x:Name="PART_VerticalScrollBar"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            Cursor="Arrow"
                            Grid.Column="1"
                            Grid.Row="0"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0" 
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Style="{DynamicResource VerticalScrollBarStyle}"/>
                        <ScrollBar x:Name="PART_HorizontalScrollBar"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            Cursor="Arrow"
                            Grid.Column="0" 
                            Grid.Row="1"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Style="{DynamicResource HorisontalScrollBarStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonUpStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent">
                        <Path x:Name="TrianglePath" Data="{StaticResource RepeatButton}" 
                                    Fill="{StaticResource VerticalScrollBarThumb}" Height="Auto" Margin="5" Stretch="Fill" Width="Auto"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Rectangle x:Name="VerticalThumb" Fill="{StaticResource VerticalScrollBarThumb}"
                                    Width="7.4" RadiusX="4" RadiusY="4"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="VerticalThumb" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsDragging"  Value="True">
                            <Setter Property="Fill" TargetName="VerticalThumb" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatButtonDownStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource RepeatButtonUpStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent">
                        <Path x:Name="BottomTrianglePath" Data="{StaticResource RepeatButton}" 
                                    Fill="{StaticResource VerticalScrollBarThumb}" Height="Auto" Margin="5" Stretch="Fill" Width="Auto"
                                    RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="-1" ScaleX="1"/>
                                    <SkewTransform AngleY="0" AngleX="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="BottomTrianglePath" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter Property="Fill" TargetName="BottomTrianglePath" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}"
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HorizontalScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="VerticalScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{StaticResource VerticalScrollBarBackground}"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                            <RowDefinition Height="0.00001*"/>
                            <RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
                        </Grid.RowDefinitions>
                        <RepeatButton Command="{x:Static ScrollBar.LineUpCommand}"
                                    IsEnabled="{TemplateBinding IsMouseOver}"
                                    Style="{StaticResource RepeatButtonUpStyle}"/>
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="1">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource VerticalScrollBarPageButton}"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ScrollBarThumb}"/>
                            </Track.Thumb>
                        </Track>
                        <RepeatButton Command="{x:Static ScrollBar.LineDownCommand}"
                                    IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" 
                                    Style="{DynamicResource RepeatButtonDownStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="Background" Value="{StaticResource HorizontalScrollBarBackground}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource RepeatButtonUpStyle}"/>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ScrollBarThumb}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource RepeatButtonUpStyle}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="HorisontalScrollBarStyle" TargetType="{x:Type ScrollBar}">
        <Setter Property="Background" Value="{StaticResource VerticalScrollBarBackground}"/>
        <Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
                <Setter Property="Background" Value="{StaticResource HorizontalScrollBarBackground}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Grid x:Name="Bg" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                    <ColumnDefinition Width="0.00001*"/>
                                    <ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
                                </Grid.ColumnDefinitions>
                                <RepeatButton Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{DynamicResource RepeatLeftButtonStyle}"/>
                                <Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource HorizontalScrollBarPageButton}"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{DynamicResource HorisontalThumbStyle}"/>
                                    </Track.Thumb>
                                </Track>
                                <RepeatButton Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{DynamicResource RepeatRightButtonStyle}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="Bg" Value="{StaticResource ScrollBarDisabledBackground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="HorisontalThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Grid>
                        <Rectangle x:Name="VerticalThumb" Fill="{StaticResource VerticalScrollBarThumb}"
                                    Height="7.4" RadiusX="4" RadiusY="4"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="VerticalThumb" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsDragging"  Value="True">
                            <Setter Property="Fill" TargetName="VerticalThumb" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatLeftButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="270"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Path x:Name="TrianglePath" Data="{StaticResource RepeatButton}" 
                                    Fill="{StaticResource VerticalScrollBarThumb}" Height="Auto" Margin="5" Stretch="Fill" Width="Auto"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RepeatRightButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform/>
                                <SkewTransform/>
                                <RotateTransform Angle="270"/>
                                <TranslateTransform/>
                            </TransformGroup>
                        </Grid.RenderTransform>
                        <Path x:Name="TrianglePath" Data="{StaticResource RepeatButton}" 
                                    Fill="{StaticResource VerticalScrollBarThumb}" Height="Auto" Margin="5" Stretch="Fill" Width="Auto" RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="180"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>





    <Style TargetType="ListBox">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDarkBrush}"/>
        <Setter Property="BorderThickness" Value="1,0,1,0" />
    </Style>

    <Style TargetType="ListView">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderDarkBrush}"/>
        <Setter Property="BorderThickness" Value="1,0,1,0" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border Name="Bd"
                                         BorderThickness="{TemplateBinding BorderThickness}"
                                         BorderBrush="{TemplateBinding BorderBrush}"
                                         Background="{TemplateBinding Background}"
                                         SnapsToDevicePixels="true">
                        <ScrollViewer 
                                      Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter TargetName="Bd"
                                    Property="Background"
                                    Value="{StaticResource BackgroundBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true" />
                                <!--<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />-->
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="Bd"
                            Background="{TemplateBinding Background}"
                            BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource ActiveBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource BackgroundDarkBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="Selector.IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{StaticResource ActiveBrush}"/>
                            <Setter Property="Foreground"  Value="{StaticResource ForegroundBrush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Hyperlink -->
    <Style TargetType="{x:Type Hyperlink}">
        <Setter Property="Foreground"  Value="{StaticResource ForegroundBrush}" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{StaticResource ActiveBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>





    <!-- Specific style redefinition -->


    <!-- CheckBox with Switch Look & Feel -->
    <Style x:Key="SwitchCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Rectangle x:Name="Ext" Fill="{StaticResource ButtonBackgroundMouseOver}" HorizontalAlignment="Left" Height="20" Stroke="{StaticResource BackgroundBrush}" VerticalAlignment="Top" Width="40" RadiusY="9" RadiusX="9" StrokeThickness="2" SnapsToDevicePixels="True"  />
                        <Ellipse x:Name="In" Fill="White" HorizontalAlignment="Left" Height="12" Stroke="{StaticResource BackgroundBrush}" VerticalAlignment="Top" Width="12"  StrokeThickness="2" Margin="24,4,0,4" SnapsToDevicePixels="True"  />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Ext" Property="Fill" Value="{StaticResource ButtonBackgroundDisabled}" />
                            <Setter TargetName="In" Property="Fill" Value="{StaticResource BorderLightBrush}" />
                            <Setter TargetName="In" Property="Margin" Value="4,4,0,4" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsChecked" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Ext" Property="Fill" Value="{StaticResource BorderLightBrush}" />
                            <Setter TargetName="In" Property="Fill" Value="{StaticResource ForegroundDisableBrush}" />
                            <Setter TargetName="In" Property="Margin" Value="4,4,0,4" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsChecked" Value="true" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Ext" Property="Fill" Value="{StaticResource ButtonBackgroundPressed}" />
                            <Setter TargetName="In" Property="Fill" Value="White" />
                            <Setter TargetName="In" Property="Margin" Value="24,4,0,4" />
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- controls:NumericEditor -->
    <Style TargetType="controls:NumericEditor" BasedOn="{StaticResource {x:Type TextBox}}" />

    <!-- controls:TextBoxWithPlaceholder -->
    <Style TargetType="{x:Type controls:TextBoxWithPlaceholder}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Style.Resources>
            <converters:BoolToObjectConverter x:Key="BoolToVisibilityConverter"/>
        </Style.Resources>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:TextBoxWithPlaceholder">
                    <Border BorderBrush="{StaticResource BackgroundDarkBrush}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}"
                    CornerRadius="{TemplateBinding Border.CornerRadius}"
                    SnapsToDevicePixels="True">
                        <Grid>
                            <ScrollViewer x:Name="PART_ContentHost" 
                                 HorizontalScrollBarVisibility="Hidden" 
                                 VerticalScrollBarVisibility="Hidden"
                                 VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                 HorizontalContentAlignment="{TemplateBinding HorizontalAlignment}"/>

                            <TextBlock Name="Placeholder"
                                 Foreground="#AAA"
                                 Background="Transparent"
                                 Focusable="False"
                                 TextAlignment="{TemplateBinding TextAlignment}"
                                 HorizontalAlignment="Left" 
                                 VerticalAlignment="Center"
                                 Margin="8,0,0,2"
                                 FontSize="{TemplateBinding FontSize}" 
                                 Text="{TemplateBinding Placeholder}"
                                 Visibility="{TemplateBinding IsPlaceholderVisible, Converter={StaticResource BoolToVisibilityConverter}}">
                            </TextBlock>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBoxNextToButtonStyle -->
    <Style TargetType="{x:Type TextBox}" x:Key="TextBoxNextToButtonStyle" BasedOn="{StaticResource {x:Type TextBox}}" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="Bd" CornerRadius="2,0,0,2" BorderBrush="{StaticResource BackgroundDarkBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="BorderBrush" Value="Black" />
                        </Trigger>

                        <!-- valid value recovery-->
                        <Trigger Property="Validation.HasError" Value="True">
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <BooleanAnimationUsingKeyFrames BeginTime="0:0:0" Duration="0:0:0"
                                                Storyboard.TargetProperty="(validation:ErrorRecovery.ProcessRecovery)">
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="False" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--animation-->
                                        <DoubleAnimation BeginTime="0:0:0.0" To="1.0" Duration="0:0:0"
                                                Storyboard.TargetName="ErrorBorder" Storyboard.TargetProperty="Opacity" />
                                        <DoubleAnimation BeginTime="0:0:0.2" Duration="0:0:1.0"
                                                Storyboard.TargetName="ErrorBorder" Storyboard.TargetProperty="Opacity" />
                                        <!--end of animation-->

                                        <!--restore value-->
                                        <BooleanAnimationUsingKeyFrames BeginTime="0:0:0.4" Duration="0:0:0"
                                                Storyboard.TargetProperty="(validation:ErrorRecovery.ProcessRecovery)">
                                            <!-- performs value recovery from view model -->
                                            <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="True" />
                                        </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DialogCommitButtonStyle -->
    <Style x:Key="DialogCommitButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="MinWidth" Value="80" />
        <Setter Property="Margin" Value="0,5,7,8" />
    </Style>

    <!-- ButtonNextToTextboxStyle -->
    <Style x:Key="ButtonNextToTextboxStyle" TargetType="ButtonBase" BasedOn="{StaticResource {x:Type ButtonBase}}" >
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="Width" Value="18" />
        <Setter Property="Padding" Value="0,0,0,1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ButtonBase">
                    <Border TextBlock.Foreground="{TemplateBinding Foreground}" x:Name="ButtonBorder" CornerRadius="0,2,2,0"
                            Background="{TemplateBinding Background}" BorderBrush="{StaticResource ButtonBorder}"
                            BorderThickness="1">
                        <ContentPresenter x:Name="ButtonContent" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                RecognizesAccessKey="True" />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundMouseOver}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderHighlighted}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundPressed}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderHighlighted}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--<Geometry x:Key="RightArrow2">F1 M 30.0833,22.1667L 50.6665,37.6043L 50.6665,38.7918L 30.0833,53.8333L 30.0833,22.1667 Z</Geometry>-->
    <Geometry x:Key="RightArrow2">F1 M 0.000,0.000 L 10.011,10.000 L 0.000,20.000 L 0.000,0.000 Z</Geometry>

    <!-- FlowToggleButtonStyle -->
    <Style x:Key="FlowToggleButtonStyle" TargetType="{x:Type ToggleButton}"  BasedOn="{StaticResource {x:Type ButtonBase}}" >
        <Setter Property="FontSize" Value="16" />
        <Setter Property="FontFamily" Value="Segoe UI Semibold" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0"  TextBlock.Foreground="{TemplateBinding Foreground}" x:Name="ButtonBorder" CornerRadius="0" Background="{StaticResource BackgroundDarkBrush}" BorderBrush="{StaticResource ButtonBorder}" BorderThickness="0">
                            <StackPanel Orientation="Horizontal"   VerticalAlignment="Center" Margin="10" >
                                <Path x:Name="icon" Fill="{StaticResource ForegroundDisableBrush}" VerticalAlignment="Center" Margin="10,0,10,0" Data="  M 22.937,7.438 C 23.083,7.583 23.229,7.771 23.375,8.000 L 16.000,8.000 L 16.000,0.625 C 16.229,0.771 16.417,0.917 16.562,1.062 L 22.937,7.438 Z M 15.500,10.000 L 24.000,10.000 L 24.000,26.500 C 24.000,26.917 23.854,27.271 23.562,27.562 C 23.271,27.854 22.917,28.000 22.500,28.000 L 1.500,28.000 C 1.083,28.000 0.729,27.854 0.437,27.562 C 0.146,27.271 -0.000,26.917 -0.000,26.500 L -0.000,1.500 C -0.000,1.083 0.146,0.729 0.437,0.438 C 0.729,0.146 1.083,0.000 1.500,0.000 L 14.000,0.000 L 14.000,8.500 C 14.000,8.917 14.146,9.271 14.437,9.562 C 14.729,9.854 15.083,10.000 15.500,10.000 Z M 18.000,21.500 L 18.000,20.500 C 18.000,20.354 17.953,20.234 17.859,20.141 C 17.766,20.047 17.646,20.000 17.500,20.000 L 6.500,20.000 C 6.354,20.000 6.234,20.047 6.141,20.141 C 6.047,20.234 6.000,20.354 6.000,20.500 L 6.000,21.500 C 6.000,21.646 6.047,21.766 6.141,21.859 C 6.234,21.953 6.354,22.000 6.500,22.000 L 17.500,22.000 C 17.646,22.000 17.766,21.953 17.859,21.859 C 17.953,21.766 18.000,21.646 18.000,21.500 Z M 18.000,17.500 L 18.000,16.500 C 18.000,16.354 17.953,16.234 17.859,16.141 C 17.766,16.047 17.646,16.000 17.500,16.000 L 6.500,16.000 C 6.354,16.000 6.234,16.047 6.141,16.141 C 6.047,16.234 6.000,16.354 6.000,16.500 L 6.000,17.500 C 6.000,17.646 6.047,17.766 6.141,17.859 C 6.234,17.953 6.354,18.000 6.500,18.000 L 17.500,18.000 C 17.646,18.000 17.766,17.953 17.859,17.859 C 17.953,17.766 18.000,17.646 18.000,17.500 Z M 18.000,13.500 L 18.000,12.500 C 18.000,12.354 17.953,12.234 17.859,12.141 C 17.766,12.047 17.646,12.000 17.500,12.000 L 6.500,12.000 C 6.354,12.000 6.234,12.047 6.141,12.141 C 6.047,12.234 6.000,12.354 6.000,12.500 L 6.000,13.500 C 6.000,13.646 6.047,13.766 6.141,13.859 C 6.234,13.953 6.354,14.000 6.500,14.000 L 17.500,14.000 C 17.646,14.000 17.766,13.953 17.859,13.859 C 17.953,13.766 18.000,13.646 18.000,13.500 Z" />
                                <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"  />
                            </StackPanel>
                        </Border>
                        <Path x:Name="arrow" Data="{StaticResource RightArrow2}" Grid.Column="1" Margin="0,0,-10,0" VerticalAlignment="Center" HorizontalAlignment="Right" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="Transparent" />
                            <Setter TargetName="ButtonBorder" Property="Background" Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundMouseOver}" />
                            <Setter TargetName="icon" Property="Fill" Value="White" />
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource ButtonBackgroundMouseOver}" />
                            <Setter Property="TextBlock.Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="ButtonBorder" Property="Opacity" Value="0.7" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush" Value="{StaticResource ButtonBorderDisabled}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ButtonBorder" Property="Background" Value="{StaticResource ButtonBackgroundPressed}" />
                            <Setter TargetName="arrow" Property="Fill" Value="{StaticResource ButtonBackgroundPressed}" />
                            <Setter TargetName="icon" Property="Fill" Value="White" />
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- NumericComboBox -->
    <Style x:Key="NumericComboBox" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="HorizontalContentAlignment" Value="Right"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- HighVoltageComboBox -->
    <Style x:Key="HighVoltageComboBox" TargetType="ComboBox" BasedOn="{StaticResource NumericComboBox}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Converter={StaticResource HighVoltageValueConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- BeamCurrentComboBox -->
    <Style x:Key="BeamCurrentComboBox" TargetType="ComboBox" BasedOn="{StaticResource NumericComboBox}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Converter={StaticResource BeamCurrentValueConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ResolutionComboBox -->
    <Style x:Key="ResolutionComboBox" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Converter={StaticResource ScanResolutionToStringConverter}}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- EnumComboBox -->
    <Style x:Key="EnumComboBox" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding Converter={StaticResource EnumToStringConverter}}" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ComboBoxEditableTextBox -->
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="MinWidth" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- controls:StatusIndicator -->
    <Style TargetType="controls:StatusIndicator"  >
        <Setter Property="Width" Value="17" />
        <Setter Property="Height" Value="17" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:StatusIndicator">
                    <Image Width="{TemplateBinding Width}" Height="{TemplateBinding Height}"
                           x:Name="imageControl"
                            Source="pack://application:,,,/Fei.SliceAndView.Common;component/Images/QuestionMark.png" ToolTip="{TemplateBinding TooltipOnNonValidStatus}" ToolTipService.ShowOnDisabled="True" 
                           ToolTipService.IsEnabled="True" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="Status" Value="Valid">
                            <Setter TargetName="imageControl" Property="Source"
                                    Value="pack://application:,,,/Fei.SliceAndView.Common;component/Images/CheckMark.png" />
                            <Setter TargetName="imageControl" Property="ToolTipService.IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="Status" Value="Invalid">
                            <Setter TargetName="imageControl" Property="Source"
                                    Value="pack://application:,,,/Fei.SliceAndView.Common;component/Images/ExclamationMark.png" />
                        </Trigger>
                        <Trigger Property="Status" Value="Info">
                            <Setter TargetName="imageControl" Property="Source"
                                    Value="pack://application:,,,/Fei.SliceAndView.Common;component/Images/QuestionMark.png" />
                        </Trigger>
                        <Trigger Property="Status" Value="Warning">
                            <Setter TargetName="imageControl" Property="Source"
                                    Value="pack://application:,,,/Fei.SliceAndView.Common;component/Images/Warning.png" />
                        </Trigger>
                        <Trigger Property="Status" Value="None">
                            <Setter TargetName="imageControl" Property="Source" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DialogButtons" TargetType="ItemsControl">
        <Setter Property="DockPanel.Dock" Value="Bottom"/>
        <Setter Property="Background" Value="{StaticResource BackgroundDarkBrush}"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <ControlTemplate.Resources>
                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                            <Setter Property="MinWidth" Value="80" />
                            <Setter Property="Margin" Value="0,5,10,5" />
                        </Style>
                    </ControlTemplate.Resources>
                    <Border Background="{TemplateBinding Background}" BorderThickness="0">
                        <ItemsPresenter/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Background="Transparent" Orientation="Horizontal" HorizontalAlignment="Right"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="AppTitle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="32" />
        <Setter Property="FontFamily" Value="Segoe UI Light" />
        <Setter Property="Foreground" Value="{StaticResource ForegroundDisableBrush}" />
        <Setter Property="Opacity" Value="0.7" />
    </Style>

    <Style x:Key="FlowPanel" TargetType="DockPanel">
        <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
    </Style>

    <Style x:Key="PlusButton" TargetType="Button" BasedOn="{StaticResource {x:Type ButtonBase}}" >
        <Setter Property="Width" Value="92" />
        <Setter Property="Height" Value="92" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border TextBlock.Foreground="{StaticResource ForegroundBrush}" x:Name="ButtonBorder"
                        CornerRadius="46" Background="{StaticResource ButtonBackground}"
                        BorderBrush="{StaticResource BackgroundDarkBrush}" BorderThickness="1">
                        <Path  HorizontalAlignment="Center" VerticalAlignment="Center" Fill="#ffffffff" Data="F1 M 45.000,21.500 L 23.500,21.500 L 23.500,0.000 L 21.500,0.000 L 21.500,21.500 L 0.000,21.500 L 0.000,23.500 L 21.500,23.500 L 21.500,45.000 L 23.500,45.000 L 23.500,23.500 L 45.000,23.500 L 45.000,21.500 Z"/>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
                            <Setter Property="Opacity" Value="0.7" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background"
                                Value="{StaticResource ButtonBackgroundMouseOver}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush"
                                Value="{StaticResource ButtonBorderHighlighted}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder" Property="Background"
                                Value="{StaticResource ButtonBackgroundPressed}" />
                            <Setter TargetName="ButtonBorder" Property="BorderBrush"
                                Value="{StaticResource ButtonBorderHighlighted}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <TextBlock
                    Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}"
                    Text="+" FontWeight="ExtraLight" FontSize="100" 
                    HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ActiveExpanderSeparator" TargetType="Separator" >
        <Setter Property="Visibility" Value="Visible" />
        <Setter Property="Height" Value="NaN" />
        <Setter Property="Width" Value="2" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Height="NaN" BorderThickness="2" BorderBrush="Red" Width="2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="RepeatButton" BasedOn="{StaticResource {x:Type ButtonBase}}"  >
        <!-- To redefine -->
    </Style>

</ResourceDictionary>